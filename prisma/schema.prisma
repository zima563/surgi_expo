// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @db.VarChar(100)
  image       String
  description String @db.VarChar(1000)
  parentId    Int? // Foreign key to the parent category

  parentCategory Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  subCategories  Category[] @relation("CategoryToParent")
  Product        Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(191)
  slug        String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  brief       String?  @db.VarChar(1000)
  imgCover    String?
  images      String?  @db.Text // Use Text type for large JSON data
  categoryId  Int?     @db.Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id]) // Existing category relation

  @@map("product")
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String   @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}
